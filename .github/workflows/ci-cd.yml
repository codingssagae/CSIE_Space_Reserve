name: CI/CD Pipeline

on:
  push:
    branches:
      - main # 메인 브랜치에 푸시할 때 실행

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: JDK 설정
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # OpenJDK 배포판
          java-version: '17'

      - name: Gradle 캐싱 설정
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle Build
        run: |
          chmod +x gradlew
          ./gradlew build

      - name: 빌드 결과 확인
        run: |
          ls -al ./build/libs

      - name: Docker 이미지 빌드
        run: |
          docker build -t my-backend:latest .

      - name: Docker 이미지 푸시 (옵션)
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag my-backend:latest ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-backend:latest

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: EC2에 SSH 접속 및 배포
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./build/libs/csieReserve-0.0.1-SNAPSHOT.jar"  # 빌드된 JAR 파일 이름
          target: "~/app"

      - name: EC2 서버에서 애플리케이션 재시작
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/app
            docker stop backend || true
            docker rm backend || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
            docker run -d --name backend -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/my-backend:latest
